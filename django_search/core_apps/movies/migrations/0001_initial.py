# Generated by Django 3.2.17 on 2023-10-19 12:13

import uuid

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
    ]

    operations = [
        migrations.RunSQL(
            sql="""CREATE SCHEMA IF NOT EXISTS content;""",
            reverse_sql='DROP SCHEMA IF EXISTS content CASCADE',
        ),
        migrations.CreateModel(
            name='FilmGenreAssociation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created in db')),
            ],
            options={
                'db_table': 'content"."film_genre',
            },
        ),
        migrations.CreateModel(
            name='FilmModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created in db')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='modified in db')),
                ('title', models.CharField(db_index=True, max_length=255, verbose_name='title')),
                ('description', models.TextField(null=True, verbose_name='description')),
                ('release_date', models.DateField(blank=True, db_index=True, null=True, verbose_name='release date')),
                ('file_path', models.TextField(null=True, verbose_name='file_path')),
                ('imdb_rating', models.FloatField(blank=True, null=True,
                                                  validators=[django.core.validators.MinValueValidator(0),
                                                              django.core.validators.MaxValueValidator(10)],
                                                  verbose_name='imdb rating')),
                ('type', models.CharField(choices=[('movie', 'Movie'), ('short', 'Short'), ('tv-series', 'TV-Series'),
                                                   ('cartoon', 'Cartoon')], db_index=True, max_length=255,
                                          verbose_name='type')),
            ],
            options={
                'verbose_name': 'Film work',
                'verbose_name_plural': 'Film works',
                'db_table': 'content"."film',
            },
        ),
        migrations.CreateModel(
            name='FilmPersonAssociation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created in db')),
                ('role', models.CharField(choices=[('actor', 'Actor'), ('writer', 'Writer'), ('director', 'Director')],
                                          max_length=255, verbose_name='role')),
                ('film', models.ForeignKey(db_column='film_uuid', on_delete=django.db.models.deletion.CASCADE,
                                           to='movies.filmmodel', to_field='uuid')),
            ],
            options={
                'db_table': 'content"."film_person',
            },
        ),
        migrations.CreateModel(
            name='GenreModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created in db')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='modified in db')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('description', models.TextField(null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'Genre',
                'verbose_name_plural': 'Genres',
                'db_table': 'content"."genre',
            },
        ),
        migrations.CreateModel(
            name='PersonModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created in db')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='modified in db')),
                ('full_name', models.CharField(max_length=255, verbose_name='full name')),
                ('films', models.ManyToManyField(through='movies.FilmPersonAssociation', to='movies.FilmModel')),
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'Persons',
                'db_table': 'content"."person',
            },
        ),
        migrations.AddField(
            model_name='filmpersonassociation',
            name='person',
            field=models.ForeignKey(db_column='person_uuid', on_delete=django.db.models.deletion.CASCADE,
                                    to='movies.personmodel', to_field='uuid'),
        ),
        migrations.AddField(
            model_name='filmmodel',
            name='genres',
            field=models.ManyToManyField(through='movies.FilmGenreAssociation', to='movies.GenreModel'),
        ),
        migrations.AddField(
            model_name='filmmodel',
            name='persons',
            field=models.ManyToManyField(through='movies.FilmPersonAssociation', to='movies.PersonModel'),
        ),
        migrations.AddField(
            model_name='filmgenreassociation',
            name='film',
            field=models.ForeignKey(db_column='film_uuid', on_delete=django.db.models.deletion.CASCADE,
                                    to='movies.filmmodel', to_field='uuid'),
        ),
        migrations.AddField(
            model_name='filmgenreassociation',
            name='genre',
            field=models.ForeignKey(db_column='genre_uuid', on_delete=django.db.models.deletion.CASCADE,
                                    to='movies.genremodel', to_field='uuid'),
        ),
        migrations.AlterUniqueTogether(
            name='filmpersonassociation',
            unique_together={('film', 'person', 'role')},
        ),
        migrations.AlterUniqueTogether(
            name='filmgenreassociation',
            unique_together={('film', 'genre')},
        ),
    ]
